---
import type { Page, Playlist } from "@spotify/web-api-ts-sdk";
import PlaylistLayout from "../../layouts/PlaylistLayout.astro";

const { playlistId } = Astro.params;

const spotifyAccessToken = Astro.cookies.get("spotify_access_token");
if (!spotifyAccessToken) {
  return Astro.redirect("/?error=token_missing");
}

// TODO this is paginated with an offset. get all playlists instead of just the first 20
const result = await fetch("https://api.spotify.com/v1/playlists/" + playlistId, {
  method: "GET",
  headers: { Authorization: `Bearer ${spotifyAccessToken.value}` },
});

// TODO implement better error handling with feedback
if (!result.ok) {
  console.log("error fetching playlists", await result.text());
  return Astro.redirect("/error?error=not_authorized");
}

const playlist: Playlist = await result.json();
---

<PlaylistLayout title="Playlist Tagging Test">
  <h1>{playlist.name}</h1>

  <details>
    <summary>json dump</summary>
    <pre>User Data: {JSON.stringify(playlist, null, 2)}</pre>
  </details>

  <dialog>
    <form method="dialog"></form>
  </dialog>

  <div id="wrapper">
    {
      playlist.tracks.items.map((playlistedTrack) => {
        const splitUri = playlistedTrack.track.uri.split(":");

        const isLocalTrack = splitUri[1] === "local";

        const trackUrl = isLocalTrack ? playlistedTrack.track.uri : `https://open.spotify.com/track/${splitUri[2]}`;

        return (
          <div
            style={{
              display: "flex",
              gap: "1rem",
              ...(isLocalTrack ? { backgroundColor: "#000", color: "#555" } : {}),
            }}
          >
            <a href={trackUrl} target="_blank">
              {playlistedTrack.track.name}
            </a>

            <button data-track-data={JSON.stringify(playlistedTrack.track)} class="add-tag-button">
              add tag
            </button>
          </div>
        );
      })
    }
  </div>
</PlaylistLayout>

<style>
  #wrapper {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  button {
    padding: 0.3rem;
    background-color: rgb(11, 143, 143);
  }
</style>

<script>
  import type { Track } from "@spotify/web-api-ts-sdk";

  const buttons = document.querySelectorAll("button.add-tag-button");

  // Handle clicks on each button.
  buttons.forEach((button) => {
    button.addEventListener("click", (event) => {
      const htmlElement = event.target;
      if (!(htmlElement instanceof HTMLButtonElement)) {
        return;
      }

      if (!htmlElement.dataset.trackData) {
        return;
      }

      const trackData: Track = JSON.parse(htmlElement.dataset.trackData);
      if (!trackData) {
        return;
      }
      console.log(trackData);
      console.log("Button was clicked!");
    });
  });
</script>
